name: Deploy User-EasyDine Frontend to Ubuntu Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout mã nguồn
      - name: Checkout code
        uses: actions/checkout@v4

      # Cài Node.js để build frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"

      # Build frontend
      - name: Build Frontend
        env:
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
          VITE_MINIO_API_URL: ${{ secrets.VITE_MINIO_API_URL }}
        run: |
          npm install
          npm run build
          ls -la dist
          cat dist/index.html

      # Deploy qua SSH với password
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Cài Git nếu chưa có
            if ! command -v git &> /dev/null; then
              sudo apt update
              sudo apt install -y git
            fi

            # Chuẩn bị thư mục
            mkdir -p /home/aris/user-easydine
            cd /home/aris/user-easydine

            # Clone hoặc pull repository
            if [ -d .git ]; then
              git pull origin main
            else
              git clone ${{ secrets.REPO_URL }} .
            fi

            # Kiểm tra file cấu hình
            ls -la Dockerfile nginx.conf docker-compose.yml
            if [ ! -f nginx.conf ]; then
              echo "Error: nginx.conf not found!"
              exit 1
            fi
            cat nginx.conf

            # Kiểm tra và load nginx:alpine3.20
            if ! docker image inspect nginx:alpine3.20 >/dev/null 2>&1; then
              if [ -f /home/aris/nginx-alpine3.20.tar ]; then
                docker load -i /home/aris/nginx-alpine3.20.tar
              else
                docker pull nginx:alpine3.20
              fi
            fi

            # Tạo network user-easydine
            if ! docker network inspect user-easydine >/dev/null 2>&1; then
              docker network create user-easydine
            fi

            # Xóa thư mục dist cũ
            rm -rf dist
            mkdir -p dist

      # Sao chép thư mục dist
      - name: Copy Build to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "./dist/*"
          target: "/home/aris/user-easydine/dist"

      # Chạy Docker Compose
      - name: Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /home/aris/user-easydine
            ls -la
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d --force-recreate
            docker image prune -f
            docker logs user-easydine-frontend
            ls -la dist

      # Kiểm tra sức khỏe
      - name: Check Frontend Health
        run: |
          sleep 10
          curl -v http://${{ secrets.SERVER_IP }}:3100