name: Deploy User-EasyDine Frontend to Ubuntu Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js for building frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"

      # Build frontend
      - name: Build Frontend
        env:
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
        run: |
          npm install
          npm run build
          ls -la dist

      # Deploy via SSH
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Check and load nginx:alpine3.20 if needed
            if ! docker image inspect nginx:alpine3.20 >/dev/null 2>&1; then
              if [ -f /home/aris/nginx-alpine3.20.tar ]; then
                docker load -i /home/aris/nginx-alpine3.20.tar
              else
                docker pull nginx:alpine3.20
              fi
            fi

            # Create admin-easydine network if not exists
            if ! docker network inspect admin-easydine >/dev/null 2>&1; then
              docker network create admin-easydine
            fi

            # Prepare directory
            cd /home/aris/user-easydine
            git pull origin main
            rm -rf dist
            mkdir -p dist

      # Copy build files to server
      - name: Copy Build to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "dist/"
          target: "/home/aris/user-easydine/dist"

      # Run Docker Compose
      - name: Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /home/aris/user-easydine
            docker-compose down --remove-orphans
            docker-compose up -d --build --force-recreate
            docker image prune -f
            
            # Wait for container to be ready
            echo "Waiting for container to start..."
            sleep 15
            
            # Check container status
            docker ps | grep user-easydine
            docker logs user-easydine --tail 10

      # Health check
      - name: Check Frontend Health
        run: |
          echo "Waiting for service to be fully ready..."
          sleep 10
          
          # Test direct port access
          curl -f http://${{ secrets.SERVER_IP }}:3100/health || echo "Direct port check failed"
          
          # Test through nginx reverse proxy
          curl -f https://vuvanthang.website/user/ || echo "Proxy check failed"